
class Invader
{
    field int x;
    field int y;
    field int px;
    field int direction;
    field int move_count;

    constructor Invader new(int Ax, int Ay)
    {
        let x = Ax;
        let y = Ay;
        let direction = 1;
        let move_count = 0;
        let px = 3;

        return this;
    }

    method void dispose()
    {
        do Memory.dealloc(this);

        return;
    }

    method void move()
    {
        if ((move_count * direction * direction) > 7)
        {
            let direction = -direction;
            let move_count = 0;
            let y = y + px;
        }
        else
        {
            let x = x + (px * direction);
            let move_count = move_count + 1;
        }

        return;
    }

    method void rect(int rx, int ry, int width, int height)
    {
        do Screen.drawRectangle(x + (rx * px), y + (ry * px),
                                x + (rx * px) + (width * px),
                                y + (ry * px) + (height * px));
        return;
    }

    method void pixel(int rx, int ry)
    {
        do rect(rx, ry, 1, 1);
        return;
    }

    method void draw()
    {
        do Screen.setColor(true);
        do rect(0, 0, 11, 8);
        do Screen.setColor(false);

        // Top
        do rect(0, 0, 2, 3);
        do pixel(2, 1);
        do pixel(0, 3);
        do rect(3, 0, 5, 1);
        do rect(4, 1, 3, 1);
        do rect(9, 0, 2, 3);
        do pixel(8, 1);
        do pixel(10, 3);

        // Eyes
        do pixel(3, 3);
        do pixel(7, 3);

        // Bottom
        do rect(1, 5, 1, 2);
        do rect(0, 7, 3, 1);
        do rect(3, 6, 5, 1);
        do rect(5, 7, 1, 1);
        do rect(8, 7, 3, 1);
        do rect(9, 5, 1, 2);

        return;
    }

    method void erase()
    {
        do Screen.setColor(false);
        do rect(0, 0, 11, 8);
        return;
    }

    method int getY()
    {
        return y;
    }
}
